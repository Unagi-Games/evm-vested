/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PaymentSplitterContract
  extends Truffle.Contract<PaymentSplitterInstance> {
  "new"(
    payees: string[],
    shares_: (number | BN | string)[],
    meta?: Truffle.TransactionDetails
  ): Promise<PaymentSplitterInstance>;
}

export interface ERC20PaymentReleased {
  name: "ERC20PaymentReleased";
  args: {
    token: string;
    to: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface PayeeAdded {
  name: "PayeeAdded";
  args: {
    account: string;
    shares: BN;
    0: string;
    1: BN;
  };
}

export interface PaymentReceived {
  name: "PaymentReceived";
  args: {
    from: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface PaymentReleased {
  name: "PaymentReleased";
  args: {
    to: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | ERC20PaymentReleased
  | PayeeAdded
  | PaymentReceived
  | PaymentReleased;

export interface PaymentSplitterInstance extends Truffle.ContractInstance {
  /**
   * Getter for the total shares held by payees.
   */
  totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Getter for the amount of shares held by an account.
   */
  shares(account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Getter for the address of the payee number `index`.
   */
  payee(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    /**
     * Getter for the total shares held by payees.
     */
    totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Getter for the address of the payee number `index`.
     */
    payee(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.
     */
    "totalReleased(address)"(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Getter for the total amount of Ether already released.
     */
    "totalReleased()"(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.
     */
    "released(address,address)"(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    "released(address)"(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    "release(address)": {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.
     */
    "release(address,address)": {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
