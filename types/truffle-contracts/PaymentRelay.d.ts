/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PaymentRelayContract
  extends Truffle.Contract<PaymentRelayInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PaymentRelayInstance>;
}

export interface PaymentRefunded {
  name: "PaymentRefunded";
  args: {
    UID: string;
    from: string;
    token: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface PaymentReserved {
  name: "PaymentReserved";
  args: {
    UID: string;
    from: string;
    token: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface PaymentSent {
  name: "PaymentSent";
  args: {
    UID: string;
    from: string;
    token: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents =
  | PaymentRefunded
  | PaymentReserved
  | PaymentSent
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked;

export interface PaymentRelayInstance extends Truffle.ContractInstance {
  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  OPERATOR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PAYMENT_EXECUTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PAYMENT_REFUNDED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PAYMENT_RESERVED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RECEIVER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  TOKEN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getPaymentKey(
    UID: string,
    from: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isPaymentReserved(
    UID: string,
    from: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isPaymentProcessed(
    UID: string,
    from: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getPayment(
    UID: string,
    from: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: string }>;

  /**
   * See _reservePayment() Requirements: - `tokenAddress` must be approved token - `amount` must be greater than 0
   * Places the function caller's funds under escrow, creating a payment reservation that can be later executed.
   */
  reservePayment: {
    (
      tokenAddress: string,
      amount: number | BN | string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      amount: number | BN | string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      amount: number | BN | string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      amount: number | BN | string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Function refunds a payment to `from`. Payment details are identified by `UID` and retrieved from storage. The payment is placed in PAYMENT_EXECUTED state. The function caller must have OPERATOR_ROLE and not be `from`. Requirements: - Payment to be refunded is currently reserved - Function caller is not refund recipient - Function caller has OPERATOR_ROLE
   * Refunds an existing payment reservation. This operation can only be executed by an authorized operator. The payment owner can not refund their own payment reservation.
   */
  refundPayment: {
    (
      from: string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Function executes an existing payment reservation on behalf of `from`. Payment details identified by `UID` are retrieved from storage and funds in escrow matching the reservation amount are forwarded to `forwardTo`. Payment is placed in PAYMENT_EXECUTED state. The function caller be either `from`, or have must have EXECUTION_ROLE. Requirements: - Payment to be executed is currently reserved - Function caller is the funds' owner, or has EXECUTION_ROLE
   * Forwards an existing payment reservation to an authorized recipient account.
   */
  execPayment: {
    (
      from: string,
      UID: string,
      forwardTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      UID: string,
      forwardTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      UID: string,
      forwardTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      UID: string,
      forwardTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    OPERATOR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    PAYMENT_EXECUTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    PAYMENT_REFUNDED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    PAYMENT_RESERVED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    RECEIVER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    TOKEN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getPaymentKey(
      UID: string,
      from: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isPaymentReserved(
      UID: string,
      from: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isPaymentProcessed(
      UID: string,
      from: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getPayment(
      UID: string,
      from: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: string }>;

    /**
     * See _reservePayment() Requirements: - `tokenAddress` must be approved token - `amount` must be greater than 0
     * Places the function caller's funds under escrow, creating a payment reservation that can be later executed.
     */
    reservePayment: {
      (
        tokenAddress: string,
        amount: number | BN | string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        amount: number | BN | string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        amount: number | BN | string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        amount: number | BN | string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Function refunds a payment to `from`. Payment details are identified by `UID` and retrieved from storage. The payment is placed in PAYMENT_EXECUTED state. The function caller must have OPERATOR_ROLE and not be `from`. Requirements: - Payment to be refunded is currently reserved - Function caller is not refund recipient - Function caller has OPERATOR_ROLE
     * Refunds an existing payment reservation. This operation can only be executed by an authorized operator. The payment owner can not refund their own payment reservation.
     */
    refundPayment: {
      (
        from: string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Function executes an existing payment reservation on behalf of `from`. Payment details identified by `UID` are retrieved from storage and funds in escrow matching the reservation amount are forwarded to `forwardTo`. Payment is placed in PAYMENT_EXECUTED state. The function caller be either `from`, or have must have EXECUTION_ROLE. Requirements: - Payment to be executed is currently reserved - Function caller is the funds' owner, or has EXECUTION_ROLE
     * Forwards an existing payment reservation to an authorized recipient account.
     */
    execPayment: {
      (
        from: string,
        UID: string,
        forwardTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        UID: string,
        forwardTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        UID: string,
        forwardTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        UID: string,
        forwardTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
