/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VestingWalletContract
  extends Truffle.Contract<VestingWalletInstance> {
  "new"(
    beneficiaryAddress: string,
    startTimestamp: number | BN | string,
    durationSeconds: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<VestingWalletInstance>;
}

export interface ERC20Released {
  name: "ERC20Released";
  args: {
    token: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface EtherReleased {
  name: "EtherReleased";
  args: {
    amount: BN;
    0: BN;
  };
}

type AllEvents = ERC20Released | EtherReleased;

export interface VestingWalletInstance extends Truffle.ContractInstance {
  /**
   * Getter for the beneficiary address.
   */
  beneficiary(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Getter for the start timestamp.
   */
  start(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Getter for the vesting duration.
   */
  duration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    /**
     * Getter for the beneficiary address.
     */
    beneficiary(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Getter for the start timestamp.
     */
    start(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Getter for the vesting duration.
     */
    duration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Amount of eth already released
     */
    "released()"(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Amount of token already released
     */
    "released(address)"(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Release the tokens that have already vested. Emits a {TokensReleased} event.
     */
    "release(address)": {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Release the native token (ether) that have already vested. Emits a {TokensReleased} event.
     */
    "release()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.
     */
    "vestedAmount(uint64)"(
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.
     */
    "vestedAmount(address,uint64)"(
      token: string,
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
