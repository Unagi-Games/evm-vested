/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PayableNFTBurnerContract
  extends Truffle.Contract<PayableNFTBurnerInstance> {
  "new"(
    _erc721: string,
    _erc20: string,
    _erc20Receiver: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PayableNFTBurnerInstance>;
}

export interface BurnExecuted {
  name: "BurnExecuted";
  args: {
    UID: string;
    0: string;
  };
}

export interface BurnReserved {
  name: "BurnReserved";
  args: {
    UID: string;
    from: string;
    tokenIds: BN[];
    amount: BN;
    0: string;
    1: string;
    2: BN[];
    3: BN;
  };
}

export interface BurnReverted {
  name: "BurnReverted";
  args: {
    UID: string;
    0: string;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents =
  | BurnExecuted
  | BurnReserved
  | BurnReverted
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked;

export interface PayableNFTBurnerInstance extends Truffle.ContractInstance {
  BURN_EXECUTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  BURN_RESERVED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  BURN_REVERTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DEAD_ADDRESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC20Origin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC20ReceiverAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC721Origin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MAINTENANCE_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  OPERATOR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RECEIVER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * See {IERC721Receiver-onERC721Received}.
   */
  onERC721Received(
    operator: string,
    from: string,
    tokenId: number | BN | string,
    data: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * sets the address to which ERC20 tokens should be sent to. The function caller must have been granted MAINTENANCE_ROLE.
   */
  setERC20Receiver: {
    (_erc20Receiver: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _erc20Receiver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _erc20Receiver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _erc20Receiver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBurn(
    UID: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ from: string; tokenIds: BN[]; amount: BN; state: string }>;

  isBurnReserved(
    UID: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isBurnProcessed(
    UID: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Function transfers `tokenIds` and `amount` of erc20 to the contract's account. A new Payment instance holding the payment details is assigned to `UID`. Burn intent is placed in BURN_RESERVED state. Requirements: - `tokenIds` must contain at least 1 token ID - `amount` must be greater than 0 - reserved burn must not exist for given `UID` - processed burn must not exist for given `UID`
   * Reserves a token burn on behalf of a NFCHAMP/CHAMP holder, placing the holder's tokens under escrow.
   */
  reserveBurn: {
    (
      UID: string,
      from: string,
      tokenIds: (number | BN | string)[],
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      UID: string,
      from: string,
      tokenIds: (number | BN | string)[],
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      UID: string,
      from: string,
      tokenIds: (number | BN | string)[],
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      UID: string,
      from: string,
      tokenIds: (number | BN | string)[],
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeBurn: {
    (UID: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(UID: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertBurn: {
    (UID: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(UID: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    BURN_EXECUTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    BURN_RESERVED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    BURN_REVERTED(txDetails?: Truffle.TransactionDetails): Promise<string>;

    DEAD_ADDRESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ERC20Origin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ERC20ReceiverAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    ERC721Origin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MAINTENANCE_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    OPERATOR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    RECEIVER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {IERC721Receiver-onERC721Received}.
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * sets the address to which ERC20 tokens should be sent to. The function caller must have been granted MAINTENANCE_ROLE.
     */
    setERC20Receiver: {
      (_erc20Receiver: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _erc20Receiver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _erc20Receiver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _erc20Receiver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBurn(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ from: string; tokenIds: BN[]; amount: BN; state: string }>;

    isBurnReserved(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isBurnProcessed(
      UID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Function transfers `tokenIds` and `amount` of erc20 to the contract's account. A new Payment instance holding the payment details is assigned to `UID`. Burn intent is placed in BURN_RESERVED state. Requirements: - `tokenIds` must contain at least 1 token ID - `amount` must be greater than 0 - reserved burn must not exist for given `UID` - processed burn must not exist for given `UID`
     * Reserves a token burn on behalf of a NFCHAMP/CHAMP holder, placing the holder's tokens under escrow.
     */
    reserveBurn: {
      (
        UID: string,
        from: string,
        tokenIds: (number | BN | string)[],
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        UID: string,
        from: string,
        tokenIds: (number | BN | string)[],
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        UID: string,
        from: string,
        tokenIds: (number | BN | string)[],
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        UID: string,
        from: string,
        tokenIds: (number | BN | string)[],
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeBurn: {
      (UID: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(UID: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revertBurn: {
      (UID: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(UID: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        UID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
