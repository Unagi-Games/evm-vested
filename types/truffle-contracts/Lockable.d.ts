/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LockableContract extends Truffle.Contract<LockableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LockableInstance>;
}

export interface Locked {
  name: "Locked";
  args: {
    account: string;
    duration: BN;
    0: string;
    1: BN;
  };
}

export interface PermanentlyLocked {
  name: "PermanentlyLocked";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents = Locked | PermanentlyLocked;

export interface LockableInstance extends Truffle.ContractInstance {
  /**
   * Getter for the permanently locked.
   */
  permanentlyLocked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns true if the contract is locked, and false otherwise.
   */
  locked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Getter for the lock end. Requirements: - The contract must be temporary locked.
   */
  lockEnd(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    /**
     * Getter for the permanently locked.
     */
    permanentlyLocked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns true if the contract is locked, and false otherwise.
     */
    locked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Getter for the lock end. Requirements: - The contract must be temporary locked.
     */
    lockEnd(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
